/**
 * Generated by @openapi-codegen
 *
 * @version 1.0.0
 */
import type * as Fetcher from './generatedFetcher';
import { generatedFetch } from './generatedFetcher';
import type * as Schemas from './generatedSchemas';
import type { ClientErrorStatus, ServerErrorStatus } from './generatedUtils';

export type FindPetsQueryParams = {
	/**
	 * tags to filter by
	 */
	tags?: string[];
	/**
	 * maximum number of results to return
	 *
	 * @format int32
	 */
	limit?: number;
};

export type FindPetsError = Fetcher.ErrorWrapper<{
	status: Exclude<ClientErrorStatus | ServerErrorStatus, 200>;
	payload: Schemas.Error;
}>;

export type FindPetsResponse = Schemas.Pet[];

export type FindPetsVariables = {
	queryParams?: FindPetsQueryParams;
};

/**
 * Returns all pets from the system that the user has access to
 */
export const findPets = (variables: FindPetsVariables, signal?: AbortSignal) =>
	generatedFetch<FindPetsResponse, FindPetsError, undefined, {}, FindPetsQueryParams, {}>({
		url: '/pets',
		method: 'get',
		...variables,
		signal
	});

export type AddPetError = Fetcher.ErrorWrapper<{
	status: Exclude<ClientErrorStatus | ServerErrorStatus, 200>;
	payload: Schemas.Error;
}>;

export type AddPetVariables = {
	body: Schemas.NewPet;
};

/**
 * Creates a new pet in the store. Duplicates are allowed
 */
export const addPet = (variables: AddPetVariables, signal?: AbortSignal) =>
	generatedFetch<Schemas.Pet, AddPetError, Schemas.NewPet, {}, {}, {}>({
		url: '/pets',
		method: 'post',
		...variables,
		signal
	});

export type FindPetByIdPathParams = {
	/**
	 * ID of pet to fetch
	 *
	 * @format int64
	 */
	id: number;
};

export type FindPetByIdError = Fetcher.ErrorWrapper<{
	status: Exclude<ClientErrorStatus | ServerErrorStatus, 200>;
	payload: Schemas.Error;
}>;

export type FindPetByIdVariables = {
	pathParams: FindPetByIdPathParams;
};

/**
 * Returns a user based on a single ID, if the user does not have access to the pet
 */
export const findPetById = (variables: FindPetByIdVariables, signal?: AbortSignal) =>
	generatedFetch<Schemas.Pet, FindPetByIdError, undefined, {}, {}, FindPetByIdPathParams>({
		url: '/pets/{id}',
		method: 'get',
		...variables,
		signal
	});

export type DeletePetPathParams = {
	/**
	 * ID of pet to delete
	 *
	 * @format int64
	 */
	id: number;
};

export type DeletePetError = Fetcher.ErrorWrapper<{
	status: Exclude<ClientErrorStatus | ServerErrorStatus, 204>;
	payload: Schemas.Error;
}>;

export type DeletePetVariables = {
	pathParams: DeletePetPathParams;
};

/**
 * deletes a single pet based on the ID supplied
 */
export const deletePet = (variables: DeletePetVariables, signal?: AbortSignal) =>
	generatedFetch<undefined, DeletePetError, undefined, {}, {}, DeletePetPathParams>({
		url: '/pets/{id}',
		method: 'delete',
		...variables,
		signal
	});
